from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from decimal import Decimal
from django.utils import timezone
from datetime import timedelta
from users.models import User
from miners.models import Miner, MinerLevel
from finance.models import Operation, OperationType
from botapp.keyboards import main_kb, claim_kb
from asgiref.sync import sync_to_async
from datetime import datetime
from finance.models import Operation, OperationType
from botapp.utils import make_miners_list


router = Router()

@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä")
async def buy_prompt(m: Message):
    await m.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ STANOK, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∫—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 350000):")

@router.message(F.text.regexp(r"^\d+(\.\d{1,2})?$"))
async def buy_process(m: Message):
    user = await sync_to_async(
        lambda: User.objects.filter(tg_id=m.from_user.id).first()
    )()
    if not user:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    amount = Decimal(m.text)
    if amount <= 0:
        await m.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    if user.balance < amount:
        await m.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} STANOK")
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    level = await sync_to_async(
        lambda: list(
            MinerLevel.objects
            .filter(active=True, min_amount__lte=amount)
            .order_by("min_amount")
        )
    )()
    selected = None
    for lvl in level:
        if lvl.max_amount is None or amount <= lvl.max_amount:
            selected = lvl
            break
    if not selected:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã.")
        return
    # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–æ–∑–¥–∞—ë–º –º–∞–π–Ω–µ—Ä
    user.balance = (user.balance - amount).quantize(Decimal('0.01'))
    await sync_to_async(user.save)(update_fields=['balance'])
    await sync_to_async(Operation.objects.create)(user=user, type=OperationType.BUY_MINER, title=f"{selected.name}", amount=-amount)

    now = timezone.now()
    miner = await sync_to_async(Miner.objects.create)(
        user=user,
        level=selected,
        principal=amount,
        daily_percent=selected.daily_percent,
        created_at=now,
        expires_at=now + timedelta(days=365),
        next_claim_at=now + timedelta(hours=24),
        active=True
    )
    await m.answer(f"–ö—É–ø–ª–µ–Ω –º–∞–π–Ω–µ—Ä {selected.name} –Ω–∞ {amount} STANOK. –î–æ—Ö–æ–¥ {selected.daily_percent}%/–¥–µ–Ω—å. –ü–µ—Ä–≤—ã–π –∫–ª–µ–π–º —á–µ—Ä–µ–∑ 24—á.", reply_markup=main_kb())

@router.message(F.text == "‚öôÔ∏è –ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã")
async def my_miners(m: Message):
    user = await sync_to_async(User.objects.filter(tg_id=m.from_user.id).first, thread_sensitive=True)()
    if not user:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    miners = await sync_to_async(
        lambda: list(
            Miner.objects
            .filter(user_id=user.id)
            .select_related("level")
            .order_by("-created_at")
        )
    )()
    print(miners)
    if not miners:
        await m.answer("–£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤.")
        return
    
    lines, miners_to_claim = make_miners_list(miners_list=miners)
    # for mn in miners:
    #     status = "–∞–∫—Ç–∏–≤–µ–Ω" if (mn.active and now < mn.expires_at) else "–∏—Å—Ç—ë–∫"
    #     left_days = max(0, (mn.expires_at - now).days)
    #     claim = "–¥–æ—Å—Ç—É–ø–µ–Ω" if mn.is_claim_available() else f"{int((mn.next_claim_at - now).total_seconds() // 3600)}"
    #     miner_name = " ".join(str(mn.level).split()[:3])
    #     # lines.append(f"‚Ä¢ #{mn.id} {mn.level.name}: {mn.principal} STANOK, {status}, –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {left_days}, claim: {claim}")
    #     s = f"üí†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüí†\nüíé{miner_name}üíé\nüîã–°—Ç–∞—Ç—É—Å: {status}\nü™ôSTANKO'–≤ –≤ —Ä–∞–±–æ—Ç–µ: {mn.principal}\nüìÖ–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: ‚Äî  {left_days}\n‚è≥–î–æ –∫–ª–∞–π–º–∞: {claim} —á–∞—Å–∞\nüí†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüí†"
    #     lines.append(s)
    #     if claim == "–¥–æ—Å—Ç—É–ø–µ–Ω":
    #         miners_to_claim.append(mn)
    await m.answer("\n".join(lines), reply_markup=claim_kb(miners_to_claim=miners_to_claim))


from aiogram.types import Message
from decimal import Decimal
from django.utils import timezone
from datetime import timedelta

@router.message(F.text == "üè≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–æ–º")
async def mining_manage(m: Message):
    await m.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–ª–µ–π–º–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞–π–Ω–µ—Ä–∞–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: claim <ID_–º–∞–π–Ω–µ—Ä–∞> (ID —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ '–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã')")

@router.callback_query(F.data.startswith("claim"))
async def claim_by_id(call: CallbackQuery):
    user = await sync_to_async(User.objects.filter(tg_id=call.from_user.id).first, thread_sensitive=True)()
    if not user:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    miner_id = int(call.data.split()[-1])
    mn = await sync_to_async(Miner.objects.select_related('level').filter(id=miner_id, user=user).first, thread_sensitive=True)()
    if not mn:
        await call.answer("–ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    now = timezone.now()
    if not (mn.active and now >= mn.next_claim_at and now < mn.expires_at):
        await call.answer("–ö–ª–µ–π–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å.")
        return
    reward = mn.claim_amount()
    # –Ω–∞—á–∏—Å–ª—è–µ–º
    await sync_to_async(Operation.objects.create)(user=user, type=OperationType.CLAIM, title=f"Claim –ø–æ {mn.level.name} #{mn.id}", amount=reward)
    user.balance = (user.balance + reward).quantize(Decimal('0.01'))
    await sync_to_async(user.save)(update_fields=['balance'])

    # –¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ
    mn.next_claim_at = mn.next_claim_at + timedelta(hours=24)
    if now >= mn.expires_at:
        mn.active = False
    await sync_to_async(mn.save)(update_fields=['next_claim_at','active'])
    await call.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {reward} STANOK. –°–ª–µ–¥—É—é—â–∏–π claim –ø–æ—Å–ª–µ {mn.next_claim_at.strftime('%d.%m %H:%M UTC')}")

    miners = await sync_to_async(
        lambda: list(
            Miner.objects
            .filter(user_id=user.id)
            .select_related("level")
            .order_by("-created_at")
        )
    )()
    lines, miners_to_claim = make_miners_list(miners_list=miners)
    await call.message.edit_text("\n".join(lines), reply_markup=claim_kb(miners_to_claim=miners_to_claim))
