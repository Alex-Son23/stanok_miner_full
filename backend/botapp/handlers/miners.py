from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from decimal import Decimal
from django.utils import timezone
from datetime import timedelta
from users.models import User
from miners.models import Miner, MinerLevel
from finance.models import Operation, OperationType
from botapp.keyboards import main_kb, claim_kb
from asgiref.sync import sync_to_async
from datetime import datetime
from finance.models import Operation, OperationType
from botapp.utils import make_miners_list
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from autoclaim.models import AutoclaimSubscription
from botapp.utils import days_hours_left
from django.conf import settings
from django.contrib.staticfiles import finders


router = Router()

def _find_static(path: str) -> str | None:
    """
    –ò—â–µ–º —Ñ–∞–π–ª –≤ —Å—Ç–∞—Ç–∏–∫–µ (–∏ –≤ app static, –∏ –≤ STATICFILES_DIRS).
    –ü—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π:
      - "botapp/promo.jpg"        (–µ—Å–ª–∏ –ª–µ–∂–∏—Ç –≤ botapp/static/botapp/promo.jpg)
      - "images/promo.jpg"        (–µ—Å–ª–∏ –ª–µ–∂–∏—Ç –≤ static/images/promo.jpg)
    """
    return finders.find(path)

class DepositState(StatesGroup):
    deposit = State()


@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä")
async def buy_prompt(m: Message, state: FSMContext):
    path = _find_static("images/prices.jpeg")
    print(path)
    photo = FSInputFile(path)
    await m.answer_photo(photo, caption="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ STANOK, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∫—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 350000)")
    # await m.answer(
    # "<code>–£—Ä–æ–≤–µ–Ω—å     –¶–µ–Ω–∞      –î–æ—Ö–æ–¥/–¥–µ–Ω—å.   –°—Ä–æ–∫</code>\n"
    # "<code>-------------------------------------------------------</code>\n"
    # "<code>MicroMiner  100k-499k # 0.5% –≤ –î–µ–Ω—å (365 –¥–Ω–µ–π)</code>\n"
    # "<code>MiniMiner   500k-999k # 0.6% –≤ –î–µ–Ω—å (365 –¥–Ω–µ–π)</code>\n"
    # "<code>NormalMiner 500k-999k # 0.6% –≤ –î–µ–Ω—å (365 –¥–Ω–µ–π)</code>\n"
    # "<code>NormalMinerLvl3 | 1,000,000‚Äì2,999,999| 0.7%      | 365 –¥–Ω–µ–π</code>\n"
    # "<code>BigMiner   Lvl4 | 3,000,000‚Äì4,999,999| 0.8%      | 365 –¥–Ω–µ–π</code>\n"
    # "<code>UltraMiner Lvl5 | 5,000,000+         | 1.0%      | 365 –¥–Ω–µ–π:</code>\n"
    # "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ STANOK, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∫—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 350000)", parse_mode="html"
    # )
    await state.set_state(DepositState.deposit)

@router.message(DepositState.deposit)
async def buy_process(m: Message, state: FSMContext):
    user = await sync_to_async(
        lambda: User.objects.filter(tg_id=m.from_user.id).first()
    )()
    if not user:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    try:
        amount = Decimal(m.text)
    except Exception as e:
        await m.answer("–î–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –±–µ–∑ –±—É–∫–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä –µ—â–µ —Ä–∞–∑")
        await state.clear()
        return
    if amount <= 0:
        await m.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    if user.balance < amount:
        await m.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} STANOK")
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    level = await sync_to_async(
        lambda: list(
            MinerLevel.objects
            .filter(active=True, min_amount__lte=amount)
            .order_by("min_amount")
        )
    )()
    selected = None
    for lvl in level:
        if lvl.max_amount is None or amount <= lvl.max_amount:
            selected = lvl
            break
    if not selected:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã.")
        return
    # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–æ–∑–¥–∞—ë–º –º–∞–π–Ω–µ—Ä
    user.balance = (user.balance - amount).quantize(Decimal('0.01'))
    await sync_to_async(user.save)(update_fields=['balance'])
    await sync_to_async(Operation.objects.create)(user=user, type=OperationType.BUY_MINER, title=f"{selected.name}", amount=-amount)

    now = timezone.now()
    miner = await sync_to_async(Miner.objects.create)(
        user=user,
        level=selected,
        principal=amount,
        daily_percent=selected.daily_percent,
        created_at=now,
        expires_at=now + timedelta(days=365),
        next_claim_at=now + timedelta(hours=24),
        active=True
    )
    await m.answer(f"–ö—É–ø–ª–µ–Ω –º–∞–π–Ω–µ—Ä {selected.name} –Ω–∞ {amount} STANOK. –î–æ—Ö–æ–¥ {selected.daily_percent}%/–¥–µ–Ω—å. –ü–µ—Ä–≤—ã–π –∫–ª–µ–π–º —á–µ—Ä–µ–∑ 24—á.", reply_markup=main_kb())
    await state.clear()

@router.message(F.text == "‚öôÔ∏è –ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã")
async def my_miners(m: Message):
    user = await sync_to_async(User.objects.filter(tg_id=m.from_user.id).first, thread_sensitive=True)()
    if not user:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    miners = await sync_to_async(
        lambda: list(
            Miner.objects
            .filter(user_id=user.id)
            .select_related("level")
            .order_by("-created_at")
        )
    )()
    print(miners)
    if not miners:
        await m.answer("–£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤.")
        return
    # autoclaim = await sync_to_async(AutoclaimSubscription.objects.select_related("user").filter(user=user).first)()
    autoclaim = await sync_to_async(
        lambda: AutoclaimSubscription.objects
            .select_related('user')                 # <-- –≤–∞–∂–Ω–æ
            .filter(user_id=user.id)
            .first()
    )()
    t = f"–ê–≤—Ç–æ–∫–ª–µ–π–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!\n"
    if autoclaim:
        print(autoclaim)
        d, h, _ = days_hours_left(autoclaim.active_until)
        if d != 0 or h != 0:
            t = f"–ê–≤—Ç–æ–∫–ª–µ–π–º –∞–∫—Ç–∏–≤–µ–Ω!\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–≤—Ç–æ–∫–ª–µ–π–º–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {d} –¥–Ω–µ–π {h} —á–∞—Å–æ–≤"
    lines, miners_to_claim = make_miners_list(miners_list=miners)
    lines.insert(0, t)
    # for mn in miners:
    #     status = "–∞–∫—Ç–∏–≤–µ–Ω" if (mn.active and now < mn.expires_at) else "–∏—Å—Ç—ë–∫"
    #     left_days = max(0, (mn.expires_at - now).days)
    #     claim = "–¥–æ—Å—Ç—É–ø–µ–Ω" if mn.is_claim_available() else f"{int((mn.next_claim_at - now).total_seconds() // 3600)}"
    #     miner_name = " ".join(str(mn.level).split()[:3])
    #     # lines.append(f"‚Ä¢ #{mn.id} {mn.level.name}: {mn.principal} STANOK, {status}, –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {left_days}, claim: {claim}")
    #     s = f"üí†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüí†\nüíé{miner_name}üíé\nüîã–°—Ç–∞—Ç—É—Å: {status}\nü™ôSTANKO'–≤ –≤ —Ä–∞–±–æ—Ç–µ: {mn.principal}\nüìÖ–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: ‚Äî  {left_days}\n‚è≥–î–æ –∫–ª–∞–π–º–∞: {claim} —á–∞—Å–∞\nüí†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüí†"
    #     lines.append(s)
    #     if claim == "–¥–æ—Å—Ç—É–ø–µ–Ω":
    #         miners_to_claim.append(mn)
    await m.answer("\n".join(lines), reply_markup=claim_kb(miners_to_claim=miners_to_claim))
