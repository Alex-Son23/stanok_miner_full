from aiogram import Router, F
from aiogram.types import Message
from decimal import Decimal
from users.models import User
from finance.models import Operation, OperationType, WithdrawalRequest
from asgiref.sync import sync_to_async

router = Router()

MIN_WITHDRAW = Decimal('100000')
TAX = Decimal('0.02')  # 2%

@router.message(F.text == "üì§ –í—ã–≤–µ—Å—Ç–∏")
async def withdraw_prompt(m: Message):
    await m.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞: '–≤—ã–≤–µ—Å—Ç–∏ <—Å—É–º–º–∞>'. –ú–∏–Ω–∏–º—É–º {MIN_WITHDRAW} STANOK. –ù–∞–ª–æ–≥ 2%. –°—É–º–º–∞ —Å—Ä–∞–∑—É —É—Ö–æ–¥–∏—Ç –≤ –∑–∞–º–æ—Ä–æ–∑–∫—É –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@router.message(F.text.regexp(r"(?i)^–≤—ã–≤–µ—Å—Ç–∏\s+\d+(?:\.\d{1,2})?$"))
async def withdraw_process(m: Message):
    user = await sync_to_async(User.objects.filter(tg_id=m.from_user.id).first, thread_sensitive=True)()
    if not user:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ /start")
        return
    try:
        amount_str = m.text.split()[1]
        amount = Decimal(amount_str)
    except Exception:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –≤—ã–≤–µ—Å—Ç–∏ 150000")
        return
    if amount < MIN_WITHDRAW:
        await m.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW}")
        return
    if user.balance < amount:
        await m.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {user.balance} STANOK")
        return
    amount_after_tax = (amount * (Decimal('1.00') - TAX)).quantize(Decimal('0.01'))
    # —Å–ø–∏—Å—ã–≤–∞–µ–º –≤ hold: —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º hold
    user.balance -= amount
    user.balance_on_hold += amount
    user.balance = user.balance.quantize(Decimal('0.01'))
    user.balance_on_hold = user.balance_on_hold.quantize(Decimal('0.01'))
    user.save(update_fields=['balance','balance_on_hold'])
    await sync_to_async(Operation.objects.create)(user=user, type=OperationType.WITHDRAW_HOLD, title="–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥", amount=-amount)
    req = await sync_to_async(WithdrawalRequest.objects.create)(
        user=user,
        amount_requested=amount,
        amount_after_tax=amount_after_tax,
        status='PENDING'
    )
    await m.answer(f"–ó–∞—è–≤–∫–∞ #{req.id} —Å–æ–∑–¥–∞–Ω–∞. –ö –ø–æ–ª—É—á–µ–Ω–∏—é –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–∞: {amount_after_tax} STANOK. –í—ã–≤–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å.")
