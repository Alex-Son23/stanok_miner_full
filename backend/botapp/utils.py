from decimal import Decimal
from django.db import transaction
from users.models import User
from finance.models import Operation, OperationType
from autoclaim.models import AutoclaimSubscription
from django.utils import timezone
from asgiref.sync import sync_to_async
from datetime import timedelta
from typing import Optional
from tonsdk.utils import Address


@sync_to_async
def adjust_balance(user: User | int, amount: Decimal, title: str, op_type: str) -> Operation:
    with transaction.atomic():
        user = User.objects.select_for_update().get(pk=user)
        user.balance = (user.balance + amount).quantize(Decimal('0.01'))
        user.save(update_fields=['balance'])
        op = Operation.objects.create(user=user, type=op_type, title=title, amount=amount)
        return op

@sync_to_async
def get_user_by_username(username: str) -> User | None:
    uname = username.lstrip('@')
    try:
        return User.objects.get(username=uname)
    except User.DoesNotExist:
        return None


def make_miners_list(miners_list) -> list:
    now = timezone.now()
    miners_to_claim = []
    lines = []
    for mn in miners_list:
        status = "–∞–∫—Ç–∏–≤–µ–Ω" if (mn.active and now < mn.expires_at) else "–∏—Å—Ç—ë–∫"
        left_days = max(0, (mn.expires_at - now).days)
        ld, lh, lm = days_hours_left(mn.expires_at)
        print("CHEEEECK")
        d, h, m = days_hours_left(mn.next_claim_at)
        claim = "–¥–æ—Å—Ç—É–ø–µ–Ω" if mn.is_claim_available() else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        miner_name = " ".join(str(mn.level).split()[:3])
        # lines.append(f"‚Ä¢ #{mn.id} {mn.level.name}: {mn.principal} STANOK, {status}, –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {left_days}, claim: {claim}")
        s = f"üíé{miner_name} #{mn.id}üíé\nüîã–°—Ç–∞—Ç—É—Å: {status}\nü™ôSTANKO'–≤ –≤ —Ä–∞–±–æ—Ç–µ: {mn.principal}\nüìÖ–†–∞–±–æ—Ç–∞—Ç—å –æ—Å—Ç–∞–ª–æ—Å—å: {ld} –¥–Ω–µ–π {lh} —á–∞—Å–æ–≤ {lm} –º–∏–Ω—É—Ç\n"
        if claim == "–¥–æ—Å—Ç—É–ø–µ–Ω":
            miners_to_claim.append(mn)
            s += "‚úÖ–ö–ª–µ–π–º –¥–æ—Å—Ç—É–ø–µ–Ω!\nüí†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüí†"
        else:
            if h == 0:
                s += f"‚è≥–î–æ –∫–ª–∞–π–º–∞: {m} –º–∏–Ω—É—Ç\nüí†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüí†"
            else:
                s += f"‚è≥–î–æ –∫–ª–∞–π–º–∞: {h} —á–∞—Å–æ–≤ {m} –º–∏–Ω—É—Ç\nüí†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüí†"
        lines.append(s)
    print(miners_to_claim)
    return lines, miners_to_claim
    
@sync_to_async
def give_autoclaim(user_id: int, plan: str):
    with transaction.atomic():
        user = User.objects.select_for_update().get(pk=user_id)
        sub = AutoclaimSubscription.objects.filter(user=user).first()
        now = timezone.now()
        delta = {"1w": timedelta(days=7), "1m": timedelta(days=30), "6m": timedelta(days=180)}[plan[-2:]]
        if sub:
            # –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∏–∑ (now, current)
            start_from = sub.active_until if sub.active_until > now else now
            sub.plan = plan
            sub.active_until = start_from + delta
            print(sub)
            sub.save(update_fields=["plan", "active_until"])
        else:
            AutoclaimSubscription.objects.create(user=user, plan=plan, active_until=now + delta)


def days_hours_left(end_dt):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (days, hours) –¥–æ end_dt.
    –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫ ‚Äî (0, 0).
    """
    now = timezone.now()
    delta = end_dt - now
    if delta.total_seconds() <= 0:
        return 0, 0, 0
    days = delta.days if delta.days else None
    hours = delta.seconds // 3600  # –æ—Å—Ç–∞—Ç–æ–∫ —á–∞—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å—É—Ç–æ–∫
    t = delta.seconds % 3600
    minutes = t // 60
    return days, hours, minutes


FORBIDDEN = set(" \t\r\n/\\?#&=")

def normalize_ton_wallet_common(addr: str) -> Optional[str]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UQ‚Ä¶ (friendly, url-safe, non-bounceable).
    Deeplink-–∏/—Å—ã—Ä—ã–µ –∞–¥—Ä–µ—Å–∞/—Ç–µ—Å—Ç–Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—Ä–≥–∞–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π UQ‚Ä¶ (mainnet) –∏–ª–∏ None.
    """
    if not addr:
        return None
    s = addr.strip()
    # –Ω–∏—á–µ–≥–æ, —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É/–ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    if "://" in s or any(ch in FORBIDDEN for ch in s):
        return None

    try:
        a = Address(s)              # tonsdk —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç CRC/–¥–ª–∏–Ω—É/–∞–ª—Ñ–∞–≤–∏—Ç
        # —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —á–µ–π–Ω –∫–æ—à–µ–ª—å–∫–æ–≤ (wc=0) –∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å
        if getattr(a, "is_test_only", False) or getattr(a, "wc", 0) != 0:
            return None

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ user-friendly, url-safe, non-bounceable => UQ‚Ä¶
        friendly = a.to_string(
            is_user_friendly=True,
            is_url_safe=True,
            is_bounceable=False,    # –∏–º–µ–Ω–Ω–æ non-bounceable (UQ‚Ä¶)
            is_test_only=False,
        )
        return friendly if friendly.startswith("UQ") else None
    except Exception:
        return None

def is_valid_ton_wallet_common(addr: str) -> bool:
    return normalize_ton_wallet_common(addr) is not None
